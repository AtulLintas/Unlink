import React, { useEffect, useRef, useState } from "react";
import Chart from "chart.js/auto";
// import Select from "react-select";

const Test = () => {
  const [company, setCompany] = useState([]);
  const [companyTable, setCompanyTable] = useState();
  const [ledger, setLedger] = useState([]);
  const [ledgerCl, setLedgerCode] = useState();
  const [ledgerData, setLedgerData] = useState([]);
  const [months, setMonths] = useState([]);
  const [updatedMonths, setUpdatedMonths]=useState([])
  const [closingBalance, setClosingBalance] = useState([]);
  const ledgerArray = Array.from(ledger);
  const ledgerDataArrray = Array.from(ledgerData);
  const labels = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

 //-------------getting first three letter of month after ledger is selected------------------
  const handleExtractFirstThreeLetters = () => {
    const firstThreeLetterMonth = months.map(item => item.substring(0, 3));
    setUpdatedMonths(firstThreeLetterMonth);
    console.log("new month",updatedMonths);

    // Check for matching months and log them to the console
    const matchingMonths = labels.filter(label => updatedMonths.includes(label.toLowerCase()));
    console.log('Matching Months:', matchingMonths);
  };
//---------------compare month(s) for closing balance at the right place----------------------




  //---------------------Company----------------------
  useEffect(() => {
    const getG_C = async () => {
      const resG_C = await fetch("http://localhost:8082/company/");
      const resgroupcompany = await resG_C.json();
      setCompany(await resgroupcompany);
    };
    getG_C();
  }, []);

  const handleCompany = (event) => {
    const getCompanyTable = event.target.value;
    setCompanyTable(getCompanyTable);
  };

  //---------------------Ledger----------------------
  useEffect(() => {
    const getcompany = async () => {
      const resCompany = await fetch(
        `http://localhost:8082/ledger/${companyTable}`
      );
      const resC = await resCompany.json();
      setLedger(await resC);
    };
    getcompany();
  }, [companyTable]);

  const handleLedger = (event) => {
    const getLed = event.target.value;
    //console.log("selected ledger:", getLed);
    setLedgerCode(getLed);
  };

  //------------------------------selected ledger-------------------------------------
  useEffect(() => {
    const getLedgerData = async () => {
      const resLedgerData = await fetch(
        `http://localhost:8082/companyTableLedger/${ledgerCl}/${companyTable}`
      );
      const resL = await resLedgerData.json();
      setLedgerData(await resL);
      console.log("resl data", resL);

      //-----------------set month and closing balance into variable----------------------
      const ledgerMonth = ledgerDataArrray.map((data) => data.Month);
      setMonths(ledgerMonth);

      const ledgerClosingBalance = ledgerDataArrray.map((data) => data.ClosingBalance);
      setClosingBalance(ledgerClosingBalance);

      //console.log("ledgerMonth: ", months, "ledgerclosingbalance:",closingBalance);
    };
    getLedgerData();
  }, [ledgerCl, companyTable]);

  //--------------------------closing Balance and month--------------------
  // useEffect(() => {
  //   const getledgerCB = async () => {
  //     const resLedger = await fetch(
  //       `http://localhost:8082/ledgerClosingBalance/`
  //     );
  //     const resLCB = await resLedger.json();
  //      console.log(resLCB);
  //     setLedger(await resLCB);
  //     // console.log(ledger);
  //   };
  //   getledgerCB();
  // }, [ledgerCl]);
  //--------------------------------------------------------------------

  const chartRef = useRef(null);
  let myChart = null;

  useEffect(() => {
    // Destroy the previous chart if it exists
    if (myChart) {
      myChart.destroy();
    }

// Check if all elements in updatedMonths match labels
const allMonthsMatched = updatedMonths.every(month => labels.includes(month));

// Set closingBalance based on the matching condition
const newClosingBalance = allMonthsMatched ? closingBalance : Array(12).fill(0);


console.log("all months matched ok:",newClosingBalance)
    const ctx = chartRef.current.getContext("2d");
    myChart = new Chart(ctx, {
      type: "bar",
      data: {
       //labels:updatedMonths,
        labels:["Jan","Fab","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],
        datasets: [
          {
            label: "Bar Graph Data",
          data: newClosingBalance,
            backgroundColor: "rgba(75, 192, 192, 0.2)",
            borderColor: "rgba(75, 192, 192, 1)",
            borderWidth: 1,
          },
        ],
      },
      options: {
        scales: {
          y: {
            beginAtZero: true,
          },
        },
      },
    });
    return () => {
      if (myChart) {
        myChart.destroy();
      }
    };  
  }, [months, closingBalance]);

  return (
    <div>
      <div>
        {/* ------------------Select Company-------------------- */}
        <select
          id="company_name"
          name="company_name"
          onChange={(e) => handleCompany(e)}
        >
          <option value="">Select Company</option>
          {company.map((getgc, i) => (
            <option key={i} value={getgc.company_table}>
              {getgc.company_name}
            </option>
          ))}
        </select>
        {/* --------------------Select Ledger------------------------ */}
        <select
          id="ledger_name"
          name="ledger_name"
          onChange={(e) => handleLedger(e)}
          onClick={handleExtractFirstThreeLetters}
        >
          <option value="">Select Ledger</option>
          {ledgerArray.map((getdata, i) => (
            <option key={i} value={getdata.LedgerNumCode}>
              {getdata.Ledger}
            </option>
          ))}
        </select>

        {/* <Select
          value={selectedOption}
          onChange={setSelectedOption}
          options={company}
          isSearchable
          placeholder="Type to search or select"
        /> */}
        <div>
          <h1>Get data from selected Ledger:</h1>
          {ledgerDataArrray.map((data, i) => (
            <div key={i}>
              <h3>{data.Month}</h3>
              <h3>{data.ClosingBalance}</h3>
            </div>
          ))}
        </div>
      </div>
      <canvas ref={chartRef} width="400" height="200" />
      
    </div>
  );
};

export default Test;




















        {/* ------------------Server Code-------------------- */}

const express = require("express");
const cors = require("cors");
const mysql = require("mysql");


const app = express();
app.use(express.json());

app.use(cors());

const db = mysql.createConnection({
    host: "localhost",
    user: "root",
    password: "",
    database: "report_automation"
})

//-----------------get company table-----------------------
app.get("/company", (req, res) => {
    const sql = "SELECT * FROM companies";
    db.query(sql, (err, list) => {
        if (err) return res.json("Error");
        return res.json(list);
    })
})



//-----------------get ladger table-----------------------
// app.get("/ledger/:companyTable", (req, res) => {
//     const sql = "SELECT * FROM lucknow_gia_grp";
//     db.query(sql, (err, list) => {
//         if (err) return res.json("Error");
//         return res.json(list);
//     })
// })



//-----------------get ledger table-----------------------
app.get("/ledger/:companyTable", (req, res) => {
    const companyTable = req.params.companyTable;
    //console.log("ledger data company table: ",companyTable)
    const sql = `SELECT DISTINCT Ledger,LedgerNumCode FROM ${companyTable}`;
    //const values = [companyTable];
    db.query(sql, (err, list) => {
        //console.log(list);
        if (err) return res.json("Error");
        return res.json(list);

    })
})
//-----------------selected ledger -----------------------
app.get("/companyTableLedger/:ledgerCl/:companyTable", (req, res) => {
    const companyTable = req.params.companyTable;
    const LedgerNumCode = req.params.ledgerCl;
   // console.log("ledgerCode: ",LedgerNumCode ,"companyTable: ",companyTable);
    const sql = `SELECT * FROM ${companyTable} WHERE LedgerNumCode = ?`;
    const values = [LedgerNumCode];
    
    db.query(sql,values, (err, list) => {
      // console.log("query list:",list);
        if (err) return res.json("Error");
        return res.json(list);
    });
});


//------------------------------------------------
// app.get("/ledger/:companyTable", (req, res) => {
//     const companyTable = req.params.companyTable;
//     const sql1 = `SELECT * FROM companies where company_name = ?`;
//     const values = [companyTable];
  
//     db.query(sql1, values, (err, list) => {
//       if (err) return res.json("Error");
  
//       if (list.length === 0) {
//         return res.json("Company not found");
//       }
  
//       const company = list[0];
//       const sql2 = `SELECT * FROM ${company.table_name}`;
  
//       db.query(sql2, (err, list2) => {
//         if (err) return res.json("Error");
  
//         const response = {
//           company,
//           tables: list2,
//         };
  
//         return res.json(response);
//       });
//     });
//   });


//-----------------get locations table-----------------------
// app.get("/locations/:companyId", (req, res) => {
//     const companyId = req.params.companyId;
//     const sql = "SELECT * FROM locations where company_id = ?";
//     const values = [companyId];
//     db.query(sql, values, (err, list) => {
//         if (err) return res.json("Error");
//         return res.json(list);
//     })
// })



// app.post('/send_group_company', (req, res) => {
//     const groupCompanyData = req.body.updatedValue;
//     console.log("getValue :",groupCompanyData);

//    // Extract and log only the 'id' values
//    const ids = groupCompanyData.map((group) => group.id);
// //    console.log('Received groupCompany ids:', ids);
//    const sql = `select * from companies where group_company_id = ${ids}`;
//    console.log("sqlData",sql);
//     db.query(sql, values, (err, result) => {
//         if (err) {
//             console.error("MySQL Error:", err);
//             return res.status(500).json("Error: " + err.message);
//         }else{
//             return res.json(result);
//         }
//     });
// });





//-------server port-------------------
app.listen(8082, () => {
    console.log("listening at port 8082");
})

